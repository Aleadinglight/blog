---
import type { MarkdownHeading } from 'astro';

const { headings = [] } = Astro.props;

// Function to organize headings into a nested structure based on depth
function organizeHeadings(headings: MarkdownHeading[]) {
  // Filter out h1 (title) as it's already shown
  const filteredHeadings = headings.filter(h => h.depth > 1);
  
  // Only display up to h3 in the TOC for clarity
  return filteredHeadings.filter(h => h.depth <= 3);
}

const tocHeadings = organizeHeadings(headings);
---

<!-- Desktop TOC -->
<div class="toc-container">
  <h2 class="text-lg font-semibold mb-4">On this page</h2>
  {tocHeadings.length > 0 && (
    <nav class="toc">
      <ul class="space-y-2 text-gray-600">
        {tocHeadings.map(heading => (
          <li class={`pl-${(heading.depth - 2) * 3}`}>
            <a
              href={`#${heading.slug}`}
              class="hover:text-blue-600 inline-block py-1 text-sm toc-link"
              data-heading-id={heading.slug}
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  )}
</div>

<!-- Mobile TOC -->
<div class="md:hidden w-full mobile-toc">
  <details class="bg-gray-50 p-4 rounded-lg">
    <summary class="text-lg font-semibold cursor-pointer">
      On this page
    </summary>
    {tocHeadings.length > 0 && (
      <nav class="mt-3">
        <ul class="space-y-2 text-gray-600">
          {tocHeadings.map(heading => (
            <li class={`pl-${(heading.depth - 2) * 3}`}>
              <a
                href={`#${heading.slug}`}
                class="hover:text-blue-600 inline-block py-1 text-sm"
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    )}
  </details>
</div>

<script>
  // Script to highlight active section while scrolling
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // Find the TOC link that corresponds to this heading
          const id = entry.target.getAttribute('id');
          const tocLink = document.querySelector(`[data-heading-id="${id}"]`);
          
          if (tocLink) {
            if (entry.isIntersecting) {
              // Remove active class from all links
              document.querySelectorAll('.toc-link').forEach(link => {
                link.classList.remove('text-blue-600', 'font-medium');
              });
              
              // Add active class to current link
              tocLink.classList.add('text-blue-600', 'font-medium');
            }
          }
        });
      },
      { 
        rootMargin: '-100px 0px -66%', 
        threshold: 0 
      }
    );

    // Observe all headings that are in the TOC
    document.querySelectorAll('h2, h3').forEach(heading => {
      observer.observe(heading);
    });
  });
</script>