---
import Base from "./Base.astro";

// Get props for the blog post
const { title, description, pubDate, updatedDate, heroImage, tags, headings = [] } = Astro.props;

// Format dates
const formattedPubDate = pubDate.toLocaleDateString('en-us', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

const formattedUpdatedDate = updatedDate && updatedDate.toLocaleDateString('en-us', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Function to organize headings into a nested structure based on depth
function organizeHeadings(headings:any) {
  // Filter out h1 (title) as it's already shown
  const filteredHeadings = headings.filter(h => h.depth > 1);
  
  // Only display up to h3 in the TOC for clarity
  return filteredHeadings.filter(h => h.depth <= 3);
}

const tocHeadings = organizeHeadings(headings);
---

<Base title={title}>
  <div class="max-w-6xl mx-auto px-4 py-6">
    <div class="lg:grid lg:grid-cols-4 lg:gap-8">
      <!-- Main content area -->
      <div class="lg:col-span-3">
        <article class="prose lg:prose-xl prose-img:rounded-xl max-w-none">
          <div class="mb-8">
            {heroImage && (
              <div class="mb-6">
                <img 
                  src={heroImage} 
                  alt={title}
                  class="w-full h-64 sm:h-96 object-cover rounded-lg shadow-md" 
                />
              </div>
            )}
            
            <h1 class="text-4xl font-bold mb-2 text-gray-900">{title}</h1>
            
            {description && (
              <p class="text-xl text-gray-600 mb-4">{description}</p>
            )}
            
            <div class="flex items-center text-gray-500 text-sm mb-6">
              <time datetime={pubDate.toISOString()}>{formattedPubDate}</time>
              {formattedUpdatedDate && (
                <span class="ml-4">
                  Last updated: <time datetime={updatedDate.toISOString()}>{formattedUpdatedDate}</time>
                </span>
              )}
            </div>
            
            {tags && tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-6">
                {tags.map((tag:string) => (
                  <span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10">
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </div>
          
          <div class="blog-content">
            <slot />
          </div>
        </article>
      </div>
      
      <!-- Only show side panel if there are headings -->
      {tocHeadings.length > 0 && (
        <div class="hidden lg:block lg:col-span-1">
          <div class="sticky top-20 pl-4 border-l border-gray-200">
            <h2 class="text-lg font-semibold mb-4">On this page</h2>
            <nav class="toc">
              <ul class="space-y-2 text-gray-600">
                {tocHeadings.map(heading => (
                  <li class={`pl-${(heading.depth - 2) * 3}`}>
                    <a 
                      href={`#${heading.slug}`} 
                      class="hover:text-blue-600 inline-block py-1 text-sm"
                    >
                      {heading.text}
                    </a>
                  </li>
                ))}
              </ul>
            </nav>
          </div>
        </div>
      )}
    </div>
    
    <!-- Mobile table of contents - only shown if there are headings -->
    {tocHeadings.length > 0 && (
      <div class="lg:hidden mt-8">
        <details class="bg-gray-50 p-4 rounded-lg">
          <summary class="text-lg font-semibold cursor-pointer">
            On this page
          </summary>
          <nav class="mt-3">
            <ul class="space-y-2 text-gray-600">
              {tocHeadings.map(heading => (
                <li class={`pl-${(heading.depth - 2) * 3}`}>
                  <a 
                    href={`#${heading.slug}`} 
                    class="hover:text-blue-600 inline-block py-1 text-sm"
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        </details>
      </div>
    )}
  </div>
  
  <script>
    // Highlight active section in table of contents
    document.addEventListener('DOMContentLoaded', () => {
      const tocLinks = document.querySelectorAll('.toc a');
      const headingElements = [...document.querySelectorAll('h2, h3')];
      
      if (tocLinks.length === 0 || headingElements.length === 0) return;
      
      function highlightActiveTocItem() {
        // How far down the page has been scrolled
        const scrollPosition = window.scrollY + 100; // offset for better usability
        
        // Find the last section that starts above the current scroll position
        let currentSection = headingElements[0];
        
        for (const heading of headingElements) {
          if ((heading as HTMLElement).offsetTop <= scrollPosition) {
            currentSection = heading;
          } else {
            break;
          }
        }
        
        // Remove 'active' class from all links
        tocLinks.forEach(link => {
          link.classList.remove('text-blue-600', 'font-medium');
        });
        
        // Add 'active' class to the corresponding link
        if (currentSection && currentSection.id) {
          const activeLink = document.querySelector(`.toc a[href="#${currentSection.id}"]`);
          if (activeLink) {
            activeLink.classList.add('text-blue-600', 'font-medium');
          }
        }
      }
      
      // Run once on load
      highlightActiveTocItem();
      
      // Run on scroll
      window.addEventListener('scroll', highlightActiveTocItem);
    });
  </script>
</Base>